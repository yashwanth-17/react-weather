{"version":3,"sources":["images/cloud1.png","images/cloud2.png","images/cloud3.png","images/cloud4.png","images/cloud5.png","App.js","reportWebVitals.js","index.js"],"names":["App","useState","city","setCity","data","setData","calcStaticTime","time","offset","d","Date","setSeconds","utc","getTime","getTimezoneOffset","toLocaleTimeString","id","cloud1","cloud2","cloud3","cloud4","cloud5","map","cloud","i","src","alt","spellCheck","autoComplete","onChange","e","target","value","placeholder","onClick","trim","Axios","get","then","res","document","getElementById","name","sys","country","style","background","weather","icon","catch","console","log","main","temp","nd","toDateString","calcTime","timezone","temp_min","temp_max","sunrise","sunset","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"uQAAe,G,YAAA,IAA0B,oCCA1B,MAA0B,mCCA1B,MAA0B,mCCA1B,MAA0B,mCCA1B,MAA0B,mCCoG1BA,MA1Ff,WAAgB,IAAD,EACWC,mBAAS,IADpB,mBACNC,EADM,KACAC,EADA,OAEWF,mBAAS,MAFpB,mBAENG,EAFM,KAEAC,EAFA,KA2Bb,SAASC,EAAeC,EAAMC,GAC5B,IAAIC,EAAI,IAAIC,KAAK,GACjBD,EAAEE,WAAWJ,GACb,IAAIK,EAAMH,EAAEI,UAAoC,IAAxBJ,EAAEK,oBAE1B,OADS,IAAIJ,KAAKE,EAAM,IAAOJ,GACrBO,qBAEZ,OACE,sBAAKC,GAAG,MAAR,UACE,qBAAKA,GAAG,SAAR,SACG,CAACC,EAAQC,EAAQC,EAAQC,EAAQC,GAAQC,KAAI,SAACC,EAAOC,GAAR,OAC5C,qBAAKR,GAAI,KAAOQ,EAAI,GAAIC,IAAKF,EAAOG,IAAI,IAAQF,QAGpD,sBAAKR,GAAG,UAAR,UACE,uBACEW,WAAW,QACXC,aAAa,MACbZ,GAAG,QACHa,SAAU,SAACC,GAAD,OAAO3B,EAAQ2B,EAAEC,OAAOC,QAClCC,YAAY,uBAEd,wBAAQjB,GAAG,MAAMkB,QA7CL,WACI,KAAhBhC,EAAKiC,QACPC,IAAMC,IAAN,4DACuDnC,EADvD,kBAHW,mCAGX,kBAGGoC,MAAK,SAACC,GAAS,IACNnC,EAASmC,EAATnC,KACRC,EAAQD,GACRoC,SAASC,eAAe,SAAST,MAC/B5B,EAAKsC,MAAQtC,EAAKuC,IAAIC,QAAU,KAAOxC,EAAKuC,IAAIC,QAAU,IAC5DJ,SAASC,eAAe,OAAOI,MAAMC,WACP,MAA5B1C,EAAK2C,QAAQ,GAAGC,KAAK,GACjB,oDACA,uDAEPC,OAAM,SAACnB,GAAD,OAAOoB,QAAQC,IAAIrB,OA8B1B,sBAGU,OAAT1B,EACC,sBAAKY,GAAG,WAAR,UACE,sBAAKA,GAAG,WAAR,UACE,qBACES,IAAG,2CAAsCrB,EAAK2C,QAAQ,GAAGC,KAAtD,WACHtB,IAAI,KAEN,oBAAGV,GAAG,OAAN,UAAcZ,EAAKgD,KAAKC,KAAxB,cAEF,mBAAGrC,GAAG,OAAN,SAAcZ,EAAK2C,QAAQ,GAAGK,OAC9B,mBAAGpC,GAAG,OAAN,SAzCV,SAAkBR,GAChB,IAAIC,EAAI,IAAIC,KACRE,EAAMH,EAAEI,UAAoC,IAAxBJ,EAAEK,oBACtBwC,EAAK,IAAI5C,KAAKE,EAAM,IAAOJ,GAC/B,OAAO8C,EAAGC,eAAiB,IAAMD,EAAGvC,qBAqCdyC,CAASpD,EAAKqD,YAC5B,0BAASzC,GAAG,aAAZ,UACE,oCACE,oCACA,8BAAIZ,EAAKgD,KAAKM,SAAd,cAEF,oCACE,oCACA,8BAAItD,EAAKgD,KAAKO,SAAd,iBAGJ,0BAAS3C,GAAG,aAAZ,UACE,oCACE,wCACA,4BAAIV,EAAeF,EAAKuC,IAAIiB,QAASxD,EAAKqD,eAE5C,oCACE,uCACA,4BAAInD,EAAeF,EAAKuC,IAAIkB,OAAQzD,EAAKqD,qBAI7C,YClFGK,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB1B,MAAK,YAAkD,IAA/C2B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFhC,SAASC,eAAe,SAM1BqB,M","file":"static/js/main.1201bf1d.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/cloud1.7deddd7e.png\";","export default __webpack_public_path__ + \"static/media/cloud2.aa9fde0e.png\";","export default __webpack_public_path__ + \"static/media/cloud3.5eb22167.png\";","export default __webpack_public_path__ + \"static/media/cloud4.277ceeda.png\";","export default __webpack_public_path__ + \"static/media/cloud5.24f80ed6.png\";","import Axios from \"axios\";\nimport { useState } from \"react\";\nimport \"./App.css\";\nimport \"./AppMedia.css\";\nimport cloud1 from \"./images/cloud1.png\";\nimport cloud2 from \"./images/cloud2.png\";\nimport cloud3 from \"./images/cloud3.png\";\nimport cloud4 from \"./images/cloud4.png\";\nimport cloud5 from \"./images/cloud5.png\";\n\nfunction App() {\n  const [city, setCity] = useState(\"\");\n  const [data, setData] = useState(null);\n  const apiKey = \"caf296e0ce821b81e46d2df84c527bc6\";\n  const printData = () => {\n    if (city.trim() !== \"\")\n      Axios.get(\n        `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}&units=metric`\n      )\n        .then((res) => {\n          const { data } = res;\n          setData(data);\n          document.getElementById(\"input\").value =\n            data.name + (data.sys.country ? \", \" + data.sys.country : \"\");\n          document.getElementById(\"App\").style.background =\n            data.weather[0].icon[2] === \"n\"\n              ? \"linear-gradient(160deg, #000000 0%, #505050 100%)\"\n              : \"linear-gradient(160deg, #0093e9 0%, #80d0c7 100%)\";\n        })\n        .catch((e) => console.log(e));\n  };\n  function calcTime(offset) {\n    var d = new Date();\n    var utc = d.getTime() + d.getTimezoneOffset() * 60000;\n    var nd = new Date(utc + 1000 * offset);\n    return nd.toDateString() + \" \" + nd.toLocaleTimeString();\n  }\n  function calcStaticTime(time, offset) {\n    var d = new Date(0);\n    d.setSeconds(time);\n    var utc = d.getTime() + d.getTimezoneOffset() * 60000;\n    var nd = new Date(utc + 1000 * offset);\n    return nd.toLocaleTimeString();\n  }\n  return (\n    <div id=\"App\">\n      <div id=\"clouds\">\n        {[cloud1, cloud2, cloud3, cloud4, cloud5].map((cloud, i) => (\n          <img id={\"i\" + (i + 1)} src={cloud} alt=\"\" key={i} />\n        ))}\n      </div>\n      <div id=\"content\">\n        <input\n          spellCheck=\"false\"\n          autoComplete=\"off\"\n          id=\"input\"\n          onChange={(e) => setCity(e.target.value)}\n          placeholder=\"enter city name...\"\n        />\n        <button id=\"btn\" onClick={printData}>\n          checkout\n        </button>\n        {data !== null ? (\n          <div id=\"desccont\">\n            <div id=\"tempcont\">\n              <img\n                src={`http://openweathermap.org/img/wn/${data.weather[0].icon}@2x.png`}\n                alt=\"\"\n              />\n              <p id=\"temp\">{data.main.temp}°C</p>\n            </div>\n            <p id=\"desc\">{data.weather[0].main}</p>\n            <p id=\"time\">{calcTime(data.timezone)}</p>\n            <section id=\"maxmincont\">\n              <section>\n                <p>Min</p>\n                <p>{data.main.temp_min}°C</p>\n              </section>\n              <section>\n                <p>Max</p>\n                <p>{data.main.temp_max}°C</p>\n              </section>\n            </section>\n            <section id=\"maxmincont\">\n              <section>\n                <p>Sunrise</p>\n                <p>{calcStaticTime(data.sys.sunrise, data.timezone)}</p>\n              </section>\n              <section>\n                <p>Sunset</p>\n                <p>{calcStaticTime(data.sys.sunset, data.timezone)}</p>\n              </section>\n            </section>\n          </div>\n        ) : null}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}